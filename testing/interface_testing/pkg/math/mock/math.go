// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/math/math.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMathInterface is a mock of MathInterface interface.
type MockMathInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMathInterfaceMockRecorder
}

// MockMathInterfaceMockRecorder is the mock recorder for MockMathInterface.
type MockMathInterfaceMockRecorder struct {
	mock *MockMathInterface
}

// NewMockMathInterface creates a new mock instance.
func NewMockMathInterface(ctrl *gomock.Controller) *MockMathInterface {
	mock := &MockMathInterface{ctrl: ctrl}
	mock.recorder = &MockMathInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMathInterface) EXPECT() *MockMathInterfaceMockRecorder {
	return m.recorder
}

// NonZeroSum mocks base method.
func (m *MockMathInterface) NonZeroSum(a, b int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NonZeroSum", a, b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NonZeroSum indicates an expected call of NonZeroSum.
func (mr *MockMathInterfaceMockRecorder) NonZeroSum(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NonZeroSum", reflect.TypeOf((*MockMathInterface)(nil).NonZeroSum), a, b)
}
